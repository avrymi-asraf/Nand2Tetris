// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address  
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Mux16(a[0..15]=false, b=instruction, sel=instruction[15], out=mainCommand);

    Mux(a=false, b=instruction[0], sel=instruction[15], out=newInstr0);
    Mux(a=false, b=instruction[1], sel=instruction[15], out=newInstr1);
    Mux(a=false, b=instruction[2], sel=instruction[15], out=newInstr2);
    Mux(a=false, b=instruction[3], sel=instruction[15], out=newInstr3);
    Mux(a=false, b=instruction[4], sel=instruction[15], out=newInstr4);
    Mux(a=false, b=instruction[5], sel=instruction[15], out=newInstr5);
    Mux(a=false, b=instruction[6], sel=instruction[15], out=newInstr6);
    Mux(a=false, b=instruction[7], sel=instruction[15], out=newInstr7);
    Mux(a=false, b=instruction[8], sel=instruction[15], out=newInstr8);
    Mux(a=false, b=instruction[9], sel=instruction[15], out=newInstr9);
    Mux(a=false, b=instruction[10], sel=instruction[15], out=newInstr10);
    Mux(a=false, b=instruction[11], sel=instruction[15], out=newInstr11);
    Mux(a=false, b=instruction[12], sel=instruction[15], out=newInstr12);
    // Mux(a=false, b=instruction[13], sel=instruction[15], out=newInstr13);
    // Mux(a=false, b=instruction[14], sel=instruction[15], out=newInstr14);

    //what load to A register
    Not(in=instruction[15], out=isACommand);
    Mux16(a=instruction, b=AluOutA, sel=instruction[15], out=ARegIn);


    //A register
    Or(a=isACommand, b=newInstr5, out=loadAReg);
    ARegister(in=ARegIn, load=loadAReg, out=ARegOut, out[0..14]=addressM, out=pcIn);

    //D register
    DRegister(in=AluOutD,load=newInstr4, out=DRegisterOut);

    //what load to ALU, between A or M registers output
    Mux16(a=ARegOut, b=inM, sel=newInstr12, out=AorMout);

    ALU(x=DRegisterOut, y=AorMout, zx=newInstr11, nx=newInstr10, zy=newInstr9, ny=newInstr8, f=newInstr7,
     no=newInstr6, out=outM, out=AluOutA, out=AluOutD, zr=zr, ng=ng);

    //pc selector 
    PcSel(isNg=newInstr2, isZr=newInstr1, isPz=newInstr0, zr=zr, ng=ng, load=pcLoad, inc=pcInc);


    //PC
    PC(in=pcIn, load=pcLoad, inc=pcInc, reset=reset, out[0..14]=pc);
    
    Or(a=newInstr3, b = false, out=writeM);
    
}


