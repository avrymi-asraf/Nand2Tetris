// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    /** private variables*/
    field int len;
    field int size;
    field Array str;
    

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {

        if (maxLength < 0) 
        {
            do Sys.error(14);
        }
        
        let str = Memory.alloc(maxLength);
        let len = 0;
        let size = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(str);
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j > len - 1))
        {
            do Sys.error(15);
            return null;
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j > len - 1))
        {
            do Sys.error(16);
            return;
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (~(len < size)) {
            do Sys.error(17);
            return this;
        }

        let str[len] = c;
        let len = len +1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (~(len > 0)) {
            do Sys.error(18);
            return;
        }
        let len = len -1;
        return;
    }

    /** Erases the last character from this string. */
    method void clear() {
        while (len > 0) {
            do eraseLastChar();
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */

    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val

        var int val;
        var int i;
        var int d;

        let val = 0;
        let i = 0;
        while (i < len)
        {
            //if (~(String.isDigit(str[i])))
            //{
                //return null;
            //}
            let d = String.intValOfChar(str[i]);    //TODO
            let val = (val*10) + d;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)

        do clear();
        do String.int2String(this, val);
        return;
    }

    /** Helper : Returns string represent int. */
    function String int2String(String s, int val) {

        var int lastDigit;
        var char c;

        let lastDigit = val - ((val / 10)*10); //val % 10

        let c = String.charValOfInt(lastDigit);
        let s = s.appendChar(c);

        if (val < 10) {
            return s;
        }

        else {
            return String.int2String(s, (val / 10));
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    /**Helper Function : Returns the int val of character. */
    function int intValOfChar(char c) {
        return c -  48;
    }

    /**Helper Function : Returns the char val of int. */
    function char charValOfInt(int c) {
        return c + 48;
    }

    /**Helper Function : Returns the char val of int. */
    //function boolean isDigit (int c) {
      //  return ((c < ))&());
    //} 
}
