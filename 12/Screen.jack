// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */

class Screen {

    static boolean color;
    static Array screen;
    static int screenEnd;
    static int maxRow; 
    static int maxCol; 

        /** Initializes the Screen. */
        function void init() {

            let color = true;
            let screen = 16384;
            let screenEnd = 24576;

            let maxRow = 256;
            let maxCol = 512;
            
            return;
        }

        /** Erases the entire screen. */
        function void clearScreen() {
            do Screen.setColor(false);
            do Screen.drawRectangle(0, 0, maxCol-1, maxRow-1);
            return;
        }

        /** Sets the current color, to be used for all subsequent drawXXX commands.
         *    Black is represented by true, white by false. */
        function void setColor(boolean b) {
            let color = b;
            return;
        }

        /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x, int y) {
            // For this function, you will need to calculate the value x%16.
            // It should be calculated quickly without using multiplication or
            // division, using exactly one basic math/logical operation.
            // In addition, calculating 16384 + y * 32 + x/16 should not use
            // division or multiplication.
            // Pseudocode:
            // 1. Compute the RAM address where the (x,y) pixel is
            //    represented: 16384 + (32*y) + (x/16).
            // 2. Use Memory.peek to get the 16-bit value of this address
            // 3. Use some bitwise operation to set (only) the bit that corresponds
            //    to the pixel to the current color.
            // 4. Use Memory.poke to write the modified 16-bit value to the RAM
            // address.

            var int address, val, j,p;

            if ( (x < 0) | (~(x < maxCol)) | (y < 0) | (~(y < maxRow)) )
            {
                do Sys.error(7);
                return;
            }

            // Compute the RAM address where the (x,y) pixel is represented: 16384 + (32*y) + (x/16).
            let address = screen + Screen.Mult32(y) + Screen.Div16(x);
            
            // Use Memory.peek to get the 16-bit value of this address
            let val = Memory.peek(address);

            //Use some bitwise operation to set (only) the bit that corresponds to the pixel to the current color.
            let j = (x & 15); // x mod 16 = (x & 15)
            let p = 1;
            while(j>0){
                let p = ^p;
                let j = j-1;
            }
            if (color) {
                let val = val|p;
            }
            // if (Screen.color = false)
            else {
                let p = ~p;
                let val = val & p;
            }
            
            //Use Memory.poke to write the modified 16-bit value to the RAM address.
            do Memory.poke(address, val);

            return;
        }

        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
        function void drawLine(int x1, int y1, int x2, int y2) {
            // The case where x1 != x2 and y1 != y2 should be implemented without
            // multiplication or division.
            // Pseudocode:
            // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
            // 2. Compute dx and dy
            // 3. while ((a <= dx) and (b <= dy))
            // 4.   do drawPixel(x+a, y+b)
            // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
            // 6.   else          { let b=b+1, diff=diff-dx }
            //
            // The case where y1 == y2 can be implemented efficiently by
            // trying to draw as many pixels as possible in a single assignment,
            // similarly to Fill in project 4.

            var int x, y, diff, a, b, dx, dy, i, dyNeg, dxNeg; 

            if ((x1 < 0)|(~(x1 < maxCol))|(x2 < 0)|(~(x2 < maxCol))|(y1 < 0)|(~(y1 < maxRow))|(y2 < 0)|(~(y2 < maxRow)))
            {
                do Sys.error(8);
                return;
            }

            //let x = x1, y = y1, a = 0, b = 0, diff = 0
            let x = x1;
            let y = y1;
            let a = 0;
            let b = 0;
            let diff = 0;
            let dxNeg = 1;
            let dyNeg = 1;
            let i = 0;

            if ((x2-x1) < 0) {
                let dxNeg = (-1);
            }
            if ((y2-y1) < 0) {
                let dyNeg = (-1);
            }

            //Compute dx and dy
            let dx = Math.abs(x2-x1);
            let dy = Math.abs(y2-y1);
            
            if (dx = 0) {
                let y = Math.min(y1, y2);
                while (i < dy) {
                    do Screen.drawPixel(x1, y +i);
                    let i = i + 1;
                }
                    return;
            }

            if (dy = 0) {
                let x = Math.min(x1, x2);
                while (i < dx) {
                    do Screen.drawPixel(x + i, y1);
                    let i = i + 1;
                }
                    return;
            }

            // while ((a <= dx) and (b <= dy))
            while ((~(a > dx)) & ( ~(b > dy)))
            {
                do Screen.drawPixel(x+(a*dxNeg), y+(b*dyNeg));

                if (diff < 0) {
                    let a=a+1;
                    let diff = diff + dy;
                }
                else {
                    let b=b+1;
                    let diff = diff-dx;
                }
            }
                    return;
        }

        /** Draws a filled rectangle whose top left corner is (x1, y1)
         * and bottom right corner is (x2,y2), using the current color. */
        function void drawRectangle(int x1, int y1, int x2, int y2) {

            var int i;

            if ((x1 < 0)|(~(x1 < maxCol))|(x2 < 0)|(~(x2 < maxCol))|(y1 < 0)|(~(y1 < maxRow))|(y2 < 0)|(~(y2 < maxRow)))
            {
                do Sys.error(9);
                return;
            }

            let i = 0;

            while (i < (y2-y1)) {
                do Screen.drawLine(x1, y1 + i, x2, y1 + i);
                let i = i+1;
            }
            return;
        }

        /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
        function void drawCircle(int x, int y, int r) {
            // This can be implemented efficiently by drawing multiple lines at
            // each iteration. You can use multiplication and sqrt.
            // Pseudocode:
            // 1. for (dy = -r ... r)
            // 2.   let halfWidth = sqrt(r*r - dy*dy)
            // 3.   do drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy)

            var int dy, halfWidth;

            // if ((x-r < 0) | (x+r > maxCol) |  (y-r < 0) | (y+r > maxRow)) {
            //     do Sys.error(12);
            //     return;
            // }

            //illegal center coordinates
            if ((x < 0) | (x > (maxCol-1)) |  (y < 0) | (y > (maxRow-1))) {
                do Sys.error(12);
                return;
            }
            
            //illegal radius
            if (r > 181) {
                do Sys.error(13);
                return;
            }

            let dy = -r;
            while (dy < r) {

                let halfWidth = Math.sqrt(Math.multiply(r, r) - Math.multiply(dy, dy));
                do Screen.drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy);
                let dy = dy + 1;
            }
            return;
        }


        function int Mult32(int x)
        {
            return ^(^(^(^(^x))));
        }

        function int Div16(int x)
        {
            return #(#(#(#x)));
        }
}
