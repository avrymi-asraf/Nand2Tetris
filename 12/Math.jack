// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
 
class Math {

    static Array powersArr;
    static int divHelp;

        /** Initializes the library. */
        function void init() {
            var int i, sum;
            
            let powersArr = Array.new(16);
            let i = 0;
            let sum = 1;

            while (i < 16) {
                let powersArr[i] = sum;
                let i = i+1;
                let sum = sum + sum; 
            }
            
            return;
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if (x < 0) {
                return -x;
            }
            return x;
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum

            var boolean isNeg;
            var int sum, shiftedx, i;
            let isNeg = false;

            if ( (x = 0) | (y = 0) ) {
                return 0;
            }

            if ( (( x < 0) & (y > 0)) | (( x > 0) & (y < 0)) ) {
                let isNeg = true;
            }

            let x = Math.abs(x);
            let y = Math.abs(y);
            

            let sum = 0;
            let shiftedx = x;
            let i = 0;

            while (i < 16) {
                if (Math.bit(y, i)) {
                    let sum = sum + shiftedx;
                }
                let shiftedx = shiftedx + shiftedx;
                let i = i + 1;
            }

            if (isNeg) {
                return -sum;
            }
            return sum;
        }


        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1

            var boolean isNeg;
            var int d;
            
            let isNeg = false;

            if (y = 0) {
                do Sys.error(3);
                return 0;
            }

            if ( (( x < 0) & (y > 0)) | (( x > 0) & (y < 0)) ) {
                let isNeg = true;
            }

            let divHelp = 0;
            let d = Math.divideHelper(Math.abs(x), Math.abs(y));

            if (isNeg) {
                return -d;
            }    
            return d;
        }

        function int divideHelper(int x, int y) {

            var int q;

            if ((y > x) | (y < 0)) {
                return 0;
            }
            let q = Math.divideHelper(x, y+y);

            if ((x - divHelp) < y) {
                return q+q;
            }
            else {
                let divHelp = divHelp + y;
                return q+q + 1;
            } 
        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y

            var int j, y, yPower2, yMultPowerOf2, newVal, newValPower2;

            if (x < 0) {
                do Sys.error(4);
                return 0;
            }

            let y = 0;
            let yPower2 = 0; // y^2
            let yMultPowerOf2 = 0; // y * 2^j 
            let j = 7; // 8/2 -1 

            while (j > -1) 
            {
                // yMultPowerOf2 = 2* yMultPowerOf2
                let yMultPowerOf2 = yMultPowerOf2 + yMultPowerOf2; 

                let newVal = y + powersArr[j];
                let newValPower2 = yPower2 + (yMultPowerOf2 + yMultPowerOf2) + powersArr[j+j];

                //  if ((y + 2**j)**2 <= x)
                // y^2 + 2 * 2^j * y + (2^j) ^2
                if (( newValPower2 - 1 < x ) & (newValPower2 > 0)){
                    // yMultPowerOf2 = 2* yMultPowerOf2
                    //then let y = y + 2**j
                    let y = newVal;

                    // y ^ 2 = (y + powersArr[j])^2 
                    let yPower2 = newValPower2;
                    let j = j-1;
                }
                else {
                    return y;
                }
            }
            return 0; //not accssesed
        }

        /** Returns the greater number. */
        function int max(int a, int b) {
            if (a > b) {
                return a;
            }
            return b;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if (a < b) {
                return a;
            }
            return b;
        }

        /** Helper function*/
        function boolean bit(int x, int i) {
            return ( x & powersArr[i]);
        }

        /** Helper function*/
        function int PowerOf2(int i) {
            return powersArr[i];
        }
}

