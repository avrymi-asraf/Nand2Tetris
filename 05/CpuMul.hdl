// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 8  | 7  |  6 | 6 | 5  | 4  | 3  | 2  | 1  |    |    |    |    |    |    |    | 
// | Instruction           |    |    |    |mOa|LoR |xOy |    |    |    |    |    |    |    |    |    |    | 
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 | d1 | d2 | d3 | j1 | j2 | j3 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:-: |:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |  0 |  * |  * | *  |  * |  * | 
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |  1 |  1 |  1 | *  |  * |  * | 
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |  1 |  0 |  1 | 0  |  1 |  0 | 
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |  1 |  0 |  1 | 0  |  1 |  1 | 
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |  1 |  0 |  1 | 1  |  1 |  0 | 
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |  1 |  0 |  1 | 0  |  0 |  0 | 
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |  1 |  0 |  1 | 0  |  0 |  1 | 
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |  1 |  0 |  1 | 1  |  0 |  0 | 
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction


    
    PARTS:
    Mux(a=false, b=instruction[0], sel=instruction[15], out=newInstr0);
    Mux(a=false, b=instruction[1], sel=instruction[15], out=newInstr1);
    Mux(a=false, b=instruction[2], sel=instruction[15], out=newInstr2);
    Mux(a=false, b=instruction[3], sel=instruction[15], out=newInstr3);
    Mux(a=false, b=instruction[4], sel=instruction[15], out=newInstr4);
    Mux(a=false, b=instruction[5], sel=instruction[15], out=newInstr5);
    Mux(a=false, b=instruction[6], sel=instruction[15], out=newInstr6);
    Mux(a=false, b=instruction[7], sel=instruction[15], out=newInstr7);
    Mux(a=false, b=instruction[8], sel=instruction[15], out=newInstr8);
    Mux(a=false, b=instruction[9], sel=instruction[15], out=newInstr9);
    Mux(a=false, b=instruction[10], sel=instruction[15], out=newInstr10);
    Mux(a=false, b=instruction[11], sel=instruction[15], out=newInstr11);
    Mux(a=false, b=instruction[12], sel=instruction[15], out=newInstr12);
    // Mux(a=false, b=instruction[13], sel=instruction[15], out=newInstr13);
    // Mux(a=false, b=instruction[14], sel=instruction[15], out=newInstr14);

    //what load to A register
    Not(in=instruction[15], out=isACommand);
    Mux16(a=instruction, b=AluOutA, sel=instruction[15], out=ARegIn);


    //A register
    Or(a=isACommand, b=newInstr5, out=loadAReg);
    ARegister(in=ARegIn, load=loadAReg, out=ARegOut, out[0..14]=addressM, out=pcIn);

    //D register
    DRegister(in=AluOutD,load=newInstr4, out=DRegisterOut);

    //what load to ALU, between A or M registers output
    Mux16(a=ARegOut, b=inM, sel=newInstr12, out=AorMout);

    ExtendAlu(x =DRegisterOut , y = AorMout , instruction = instruction[6..14] , out=outM, out=AluOutA, out=AluOutD , zr = zr , ng = ng ) ;

    // ALU(x=DRegisterOut, y=AorMout, zx=newInstr11, nx=newInstr10, zy=newInstr9, ny=newInstr8, f=newInstr7,
    //  no=newInstr6, out=outM, out=AluOutA, out=AluOutD, zr=zr, ng=ng);

    //pc selector 
    PcSel(isNg=newInstr2, isZr=newInstr1, isPz=newInstr0, zr=zr, ng=ng, load=pcLoad, inc=pcInc);


    //PC
    PC(in=pcIn, load=pcLoad, inc=pcInc, reset=reset, out[0..14]=pc);
    
    Or(a=newInstr3, b = false, out=writeM);
    
}
